package com.clesun.web.skyland.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class PlantrecordExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected int offset = -1;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected int limit = -1;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public PlantrecordExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public void setOffset(int offset) {
        this.offset=offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public int getOffset() {
        return offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public void setLimit(int limit) {
        this.limit=limit;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public int getLimit() {
        return limit;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        public void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        public void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andBhIsNull() {
            addCriterion("bh is null");
            return (Criteria) this;
        }

        public Criteria andBhIsNotNull() {
            addCriterion("bh is not null");
            return (Criteria) this;
        }

        public Criteria andBhEqualTo(String value) {
            addCriterion("bh =", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhNotEqualTo(String value) {
            addCriterion("bh <>", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhGreaterThan(String value) {
            addCriterion("bh >", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhGreaterThanOrEqualTo(String value) {
            addCriterion("bh >=", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhLessThan(String value) {
            addCriterion("bh <", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhLessThanOrEqualTo(String value) {
            addCriterion("bh <=", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhLike(String value) {
            addCriterion("bh like", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhNotLike(String value) {
            addCriterion("bh not like", value, "bh");
            return (Criteria) this;
        }

        public Criteria andBhIn(List<String> values) {
            addCriterion("bh in", values, "bh");
            return (Criteria) this;
        }

        public Criteria andBhNotIn(List<String> values) {
            addCriterion("bh not in", values, "bh");
            return (Criteria) this;
        }

        public Criteria andBhBetween(String value1, String value2) {
            addCriterion("bh between", value1, value2, "bh");
            return (Criteria) this;
        }

        public Criteria andBhNotBetween(String value1, String value2) {
            addCriterion("bh not between", value1, value2, "bh");
            return (Criteria) this;
        }

        public Criteria andPlantbhIsNull() {
            addCriterion("plantbh is null");
            return (Criteria) this;
        }

        public Criteria andPlantbhIsNotNull() {
            addCriterion("plantbh is not null");
            return (Criteria) this;
        }

        public Criteria andPlantbhEqualTo(String value) {
            addCriterion("plantbh =", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhNotEqualTo(String value) {
            addCriterion("plantbh <>", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhGreaterThan(String value) {
            addCriterion("plantbh >", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhGreaterThanOrEqualTo(String value) {
            addCriterion("plantbh >=", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhLessThan(String value) {
            addCriterion("plantbh <", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhLessThanOrEqualTo(String value) {
            addCriterion("plantbh <=", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhLike(String value) {
            addCriterion("plantbh like", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhNotLike(String value) {
            addCriterion("plantbh not like", value, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhIn(List<String> values) {
            addCriterion("plantbh in", values, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhNotIn(List<String> values) {
            addCriterion("plantbh not in", values, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhBetween(String value1, String value2) {
            addCriterion("plantbh between", value1, value2, "plantbh");
            return (Criteria) this;
        }

        public Criteria andPlantbhNotBetween(String value1, String value2) {
            addCriterion("plantbh not between", value1, value2, "plantbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhIsNull() {
            addCriterion("parcelbh is null");
            return (Criteria) this;
        }

        public Criteria andParcelbhIsNotNull() {
            addCriterion("parcelbh is not null");
            return (Criteria) this;
        }

        public Criteria andParcelbhEqualTo(String value) {
            addCriterion("parcelbh =", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhNotEqualTo(String value) {
            addCriterion("parcelbh <>", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhGreaterThan(String value) {
            addCriterion("parcelbh >", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhGreaterThanOrEqualTo(String value) {
            addCriterion("parcelbh >=", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhLessThan(String value) {
            addCriterion("parcelbh <", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhLessThanOrEqualTo(String value) {
            addCriterion("parcelbh <=", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhLike(String value) {
            addCriterion("parcelbh like", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhNotLike(String value) {
            addCriterion("parcelbh not like", value, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhIn(List<String> values) {
            addCriterion("parcelbh in", values, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhNotIn(List<String> values) {
            addCriterion("parcelbh not in", values, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhBetween(String value1, String value2) {
            addCriterion("parcelbh between", value1, value2, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andParcelbhNotBetween(String value1, String value2) {
            addCriterion("parcelbh not between", value1, value2, "parcelbh");
            return (Criteria) this;
        }

        public Criteria andAreaIsNull() {
            addCriterion("area is null");
            return (Criteria) this;
        }

        public Criteria andAreaIsNotNull() {
            addCriterion("area is not null");
            return (Criteria) this;
        }

        public Criteria andAreaEqualTo(String value) {
            addCriterion("area =", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotEqualTo(String value) {
            addCriterion("area <>", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaGreaterThan(String value) {
            addCriterion("area >", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaGreaterThanOrEqualTo(String value) {
            addCriterion("area >=", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaLessThan(String value) {
            addCriterion("area <", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaLessThanOrEqualTo(String value) {
            addCriterion("area <=", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaLike(String value) {
            addCriterion("area like", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotLike(String value) {
            addCriterion("area not like", value, "area");
            return (Criteria) this;
        }

        public Criteria andAreaIn(List<String> values) {
            addCriterion("area in", values, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotIn(List<String> values) {
            addCriterion("area not in", values, "area");
            return (Criteria) this;
        }

        public Criteria andAreaBetween(String value1, String value2) {
            addCriterion("area between", value1, value2, "area");
            return (Criteria) this;
        }

        public Criteria andAreaNotBetween(String value1, String value2) {
            addCriterion("area not between", value1, value2, "area");
            return (Criteria) this;
        }

        public Criteria andSdateIsNull() {
            addCriterion("sdate is null");
            return (Criteria) this;
        }

        public Criteria andSdateIsNotNull() {
            addCriterion("sdate is not null");
            return (Criteria) this;
        }

        public Criteria andSdateEqualTo(Date value) {
            addCriterionForJDBCDate("sdate =", value, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateNotEqualTo(Date value) {
            addCriterionForJDBCDate("sdate <>", value, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateGreaterThan(Date value) {
            addCriterionForJDBCDate("sdate >", value, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("sdate >=", value, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateLessThan(Date value) {
            addCriterionForJDBCDate("sdate <", value, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("sdate <=", value, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateIn(List<Date> values) {
            addCriterionForJDBCDate("sdate in", values, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateNotIn(List<Date> values) {
            addCriterionForJDBCDate("sdate not in", values, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("sdate between", value1, value2, "sdate");
            return (Criteria) this;
        }

        public Criteria andSdateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("sdate not between", value1, value2, "sdate");
            return (Criteria) this;
        }

        public Criteria andEdateIsNull() {
            addCriterion("edate is null");
            return (Criteria) this;
        }

        public Criteria andEdateIsNotNull() {
            addCriterion("edate is not null");
            return (Criteria) this;
        }

        public Criteria andEdateEqualTo(Date value) {
            addCriterionForJDBCDate("edate =", value, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateNotEqualTo(Date value) {
            addCriterionForJDBCDate("edate <>", value, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateGreaterThan(Date value) {
            addCriterionForJDBCDate("edate >", value, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("edate >=", value, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateLessThan(Date value) {
            addCriterionForJDBCDate("edate <", value, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("edate <=", value, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateIn(List<Date> values) {
            addCriterionForJDBCDate("edate in", values, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateNotIn(List<Date> values) {
            addCriterionForJDBCDate("edate not in", values, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("edate between", value1, value2, "edate");
            return (Criteria) this;
        }

        public Criteria andEdateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("edate not between", value1, value2, "edate");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PLANTRECORD
     *
     * @mbggenerated do_not_delete_during_merge Tue Jan 08 09:35:44 CST 2019
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PLANTRECORD
     *
     * @mbggenerated Tue Jan 08 09:35:44 CST 2019
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}